- general configuration:

----------------------------------------------------------------
data_handler_config = {
    "start_time": "2008-01-01",
    "end_time": "2022-02-24",
    "fit_start_time": "2008-01-01",
    "fit_end_time": "2017-12-31",
    "instruments": market,
    "infer_processors": [
      {
        "class": "RobustZScoreNorm",
        "kwargs": {
          "fields_group": "feature",
          "clip_outlier": "true"
        }
      },
      {
        "class": "Fillna",
        "kwargs": {
          "fields_group": "feature"
        }
      }
    ],
    "learn_processors": [
      {
        "class": "DropnaLabel"
      },
      {
        "class": "CSRankNorm",
        "kwargs": {
          "fields_group": "label"
        }
      }
    ],
    "label": [
      "Ref($close, -2) / Ref($close, -1) - 1"
    ]
}

dataset_config = {
    "class": "DatasetH",
    "module_path": "qlib.data.dataset",
    "kwargs": {
        "handler": {
            "class": "Alpha360",
            "module_path": "qlib.contrib.data.handler",
            "kwargs": data_handler_config,
        },
        "segments": {
            "train": ("2008-01-01", "2017-12-31"),
            "valid": ("2018-01-01", "2020-12-31"),
            "test": ("2021-01-01", "2022-02-24"),
        },
    },
}
----------------------------------------------------------------

- db_1_0.sqlite3
    - optimizer: adam
    - lr: trial.suggest_float("lr", 1e-8, 1.0, log=True)
    - "segments": {
            "train": ("2008-01-01", "2018-12-31"),
            "valid": ("2019-01-01", "2020-12-31"),
            "test": ("2021-01-01", "2022-02-24"),
        }

- db_2_0.sqlite3
    - optimizer: adam
    - lr: trial.suggest_float("lr", 1e-8, 1.0, log=True)
    - "segments": {
            "train": ("2008-01-01", "2017-12-31"),
            "valid": ("2018-01-01", "2020-12-31"),
            "test": ("2021-01-01", "2022-02-24"),
        }

- db_3_0.sqlite3
    - optimizer: adam
    - lr: trial.suggest_float("lr", 1e-8, 1.0, log=True)
    - "segments": {
            "train": ("2008-01-01", "2016-12-31"),
            "valid": ("2017-01-01", "2020-12-31"),
            "test": ("2021-01-01", "2022-02-24"),
        }

- db_4_0.sqlite3
    - optimizer: adam
    - lr: trial.suggest_float("lr", 1e-8, 1.0, log=True)
    - "segments": {
            "train": ("2008-01-01", "2016-12-31"),
            "valid": ("2017-01-01", "2020-12-31"),
            "test": ("2021-01-01", "2022-02-24"),
        }

- db_5_0.sqlite3
    - optimizer: gd
    - lr: trial.suggest_float("lr", 1e-5, 1e-1, log=True)
    - "segments": {
            "train": ("2008-01-01", "2016-12-31"),
            "valid": ("2017-01-01", "2020-12-31"),
            "test": ("2021-01-01", "2022-02-24"),
        }

------------------- Pós Pandemia -------------------
- db_6_0.sqlite3 (Pós pandemia)
    - optimizer: gd
    - lr: trial.suggest_float("lr", 1e-5, 1e-1, log=True)
    - task:
      task = {
        "model": {
            "class": "DNNModelPytorch",
            "module_path": "qlib.contrib.model.pytorch_nn",
            "kwargs": {
                "optimizer": "gd",
                "lr": trial.suggest_float("lr", 1e-5, 1e-2, log=True),
                "loss": "mse",
                "max_steps": trial.suggest_categorical("max_steps", [9000, 8000, 7000, 6000, 2000, 1000, 300]),
                "batch_size": trial.suggest_categorical("batch_size", [1024, 2048, 4096, 8192]),
            },
        },
      }
    - "segments": {
            "train": ("2008-01-01", "2017-12-31"),
            "valid": ("2018-01-01", "2019-12-31"),
            "test": ("2020-01-01", "2022-02-24"),
        }
    -  "label": [
      "Ref($close, -2) / Ref($close, -1) - 1"
    ]


- db_7_0.sqlite3 (Pós pandemia)
    - optimizer: adam
    - lr: trial.suggest_float("lr", 1e-5, 1e-1, log=True)
    - task:
      task = {
        "model": {
            "class": "DNNModelPytorch",
            "module_path": "qlib.contrib.model.pytorch_nn",
            "kwargs": {
                "optimizer": "adam",
                "lr": trial.suggest_float("lr", 1e-5, 1e-1, log=True),
                "loss": "mse",
                "max_steps": trial.suggest_categorical("max_steps", [9000, 8000, 7000, 6000, 2000, 1000, 300]),
                "batch_size": trial.suggest_categorical("batch_size", [1024, 2048, 4096, 8192]),
            },
        },
      }
    - "segments": {
            "train": ("2008-01-01", "2017-12-31"),
            "valid": ("2018-01-01", "2019-12-31"),
            "test": ("2020-01-01", "2022-02-24"),
        }
    -  "label": [
      "Ref($close, -1) / $close - 1"
    ]